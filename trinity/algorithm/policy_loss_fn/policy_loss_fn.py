from abc import ABC, abstractmethod
from typing import Any, Dict, Tuple

import torch

from trinity.utils.registry import Registry

POLICY_LOSS_FN = Registry("policy_loss_fn")


class PolicyLossFn(ABC):
    """
    Policy Loss Function
    """

    @abstractmethod
    def __call__(
        self,
        logprob: torch.Tensor,
        old_logprob: torch.Tensor,
        action_mask: torch.Tensor,
        advantages: torch.Tensor,
        experiences: Any,
        **kwargs,
    ) -> Tuple[torch.Tensor, Dict]:
        """
        Args:
            logprob (`torch.Tensor`): The log probability generated by the policy model.
            old_logprob (`torch.Tensor`): The log probability generated by the reference model.
            action_mask (`torch.Tensor`): The action mask.
            advantages (`torch.Tensor`): The advantages.
            experiences (`DataProto`): The input experiences.
            kwargs (`Dict`): The step-level parameters for calculating the policy loss.

        Returns:
            `torch.Tensor`: Policy loss
            `Dict`: The metrics for logging.
        """
