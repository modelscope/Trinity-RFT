"""Launch the trainer"""

import argparse

import ray

from trinity.common.config import Config, load_config
from trinity.common.constants import AlgorithmType
from trinity.explorer.explorer import Explorer
from trinity.trainer.trainer import Trainer
from trinity.utils.log import get_logger

logger = get_logger(__name__)


def explore(config: Config) -> None:
    """Run explorer."""
    explorer = Explorer.remote(config)
    try:
        ray.get(explorer.prepare.remote())
        ray.get(explorer.sync_weight.remote())
        ray.get(explorer.explore.remote())
        logger.info("Explore finished.")
    except Exception as e:
        logger.error(f"Explore failed: {e}")
        raise e


def train(config: Config) -> None:
    """Run trainer."""

    trainer = Trainer.remote(config)
    ray.get(trainer.prepare.remote())

    if config.trainer.sft_warmup_iteration > 0:
        for step in range(config.trainer.sft_warmup_iteration):
            ray.get(trainer.train_step.remote(AlgorithmType.SFT))
            logger.info(f"SFT warmup step {step} finished.")

    algo_type = config.trainer.algorithm_type
    try:
        ray.get(trainer.train.remote(algo_type))
        logger.info("Train finished.")
    except Exception as e:
        logger.error(f"Train failed {e}.")
        raise e


def both(config: Config) -> None:
    """Setup both explorer and trainer.

    For the explorer, a step contains `batch_size * sync_iteration_interval` number
    of rollout tasks.

    For the trainer, it has to consume all experiences generated by the explorer in
    the latest step. The specific number of experiences may vary for different
    algorithms and tasks.
    """
    explorer = Explorer.remote(config)
    trainer = Trainer.remote(config)
    ray.get([explorer.__ray_ready__.remote(), trainer.__ray_ready__.remote()])
    logger.info("Setup explorer and trainer finished.")
    ray.get(
        [
            explorer.prepare.remote(),
            trainer.prepare.remote(),
        ]
    )
    # sync weight before training start
    ray.get([explorer.sync_weight.remote(), trainer.sync_weight.remote()])

    if config.trainer.sft_warmup_iteration > 0:
        for step in range(config.trainer.sft_warmup_iteration):
            ray.get(trainer.train_step.remote(AlgorithmType.SFT))
            logger.info(f"SFT warmup step {step} finished.")
        ray.get([explorer.sync_weight.remote(), trainer.sync_weight.remote()])

    algo_type = config.trainer.algorithm_type
    while True:
        try:
            ref_explore = explorer.explore_step.remote()
            ref_train = trainer.train_step.remote(algo_type)
            explore_continue, explore_iter_num = ray.get(ref_explore)
            train_continue, train_iter_num = ray.get(ref_train)
            if not explore_continue:
                logger.info("Explorer finished, stopping...")
                break
            if not train_continue:
                logger.info("Trainer finished, stopping...")
                break
            ray.get([explorer.sync_weight.remote(), trainer.sync_weight.remote()])
            logger.info("Model weight synchronized.")
        except Exception as e:
            logger.error(e)
            logger.error("Training stopped due to exception.")
            raise e
        if train_iter_num % config.trainer.eval_interval == 0:
            try:
                ray.get(explorer.eval.remote())
                logger.info("Evaluation finished.")
            except Exception as e:
                logger.error(e)
                logger.error("Evaluation failed.")
                raise e


def activate_data_module(config_path: str):
    """Check whether to activate data module and preprocess datasets."""
    from trinity.data.client import LOCAL_SERVER_URL, request

    logger.info("Activating data module...")
    res = request(
        url=LOCAL_SERVER_URL,
        configPath=config_path,
    )
    if res["return_code"] != 0:
        logger.error(f"Failed to activate data module: {res['return_msg']}.")
        return


def main() -> None:
    """The main entrypoint."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command", required=True)

    # run command
    run_parser = subparsers.add_parser("run", help="Run RFT process.")
    run_parser.add_argument("--config", type=str, required=True, help="config file path.")

    # TODO: add more commands like `monitor`, `label`

    args = parser.parse_args()
    if args.command == "run":
        # TODO: support parse all args from command line
        config = load_config(args.config)
        config.check_and_update()
        # try to activate data module
        data_config = config.data
        if data_config.dj_config_path or data_config.dj_process_desc:
            activate_data_module(args.config)
        ray.init()
        if config.mode == "explore":
            explore(config)
        elif config.mode == "train":
            train(config)
        elif config.mode == "both":
            both(config)


if __name__ == "__main__":
    main()
